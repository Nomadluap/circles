#ifndef SHAPESELECTOR_HPP
#define SHAPESELECTOR_HPP

#include <QWidget>
#include <QDialog>
#include <QResizeEvent>
#include <QList>
#include <QPointF>
#include <QGraphicsPolygonItem>
#include <QPolygonF>
#include <memory>
#include "packing/EuclidPacking.hpp"
#include "view/SelectionVertex.hpp"
#include "view/PackingView.hpp"

using namespace Circles;


namespace Ui {
class ShapeSelector;
}

namespace Circles{
    namespace GUI{
    class ShapeSelector : public QDialog
    {
        Q_OBJECT
    public:
        explicit ShapeSelector(QWidget *parent = 0);
        ~ShapeSelector();

    signals:
        /**
         * Emitted when the user has created a packing and has clicked the accept button.
         * @param p
         */
        void packingAccepted(std::shared_ptr<Packing::EuclidPacking> p);

    private slots:
        /**
         * Manually add a vertex to the vertex list from the input box.
         */
        void manualAddVertex();

        /**
         * Delete a selected vertex from the vertex list.
         */
        void deleteSelected();

        /**
         * Update our current row pointer when the user changes their selection in the vertex list
         * @param row
         */
        void selectionChanged(int row);

        /**
         *Cull the circles in the packing, so that only circles whose centers lie within the polygon are kept. Also
         *recursively cull any circles that have one or less neighbours.
         */
        void cullPacking();

        /**
         * Accept the packing as displayed and emit the PackingAccepted signal. Close the window.
         */
        void acceptPacking();

        /**
         * Re-size the circles as they are displayed on the view. Uses the value from the spinbox as the circle
         * radius.
         */
        void circleResize();

        /**
         * Re-size the circles as they are displayed on the view.
         * @param radius the radius to set the circles to
         */
        void circleResize(qreal radius);

        /**
         * Add a vertex to the polygon at the specified point.
         * @param pos The point for which to add the polygon. Should reside within the unit square.
         */
        void addVertex(QPointF pos);

        /**
         * Meant to catch mouse press events generated by the PackingView.
         * @param event event which was gotten.
         */
        void sceneMousePressEvent(QGraphicsSceneMouseEvent* event);

        /**
         * Remove all vertices from the vertex list and reset the polygon.
         */
        void resetPolygon();

        /**
         * Summon a file dialog, and open the selected .cpshape file, resizing the circle array and
         * pre-drawing the selected shape.
         */
        void readShapeFile();

        /**
         * Summon a file dialog and Write infromation about the size of the circle array and the location of the
         * vertices of the polygon to a .cpshape file.
         */
        void writeShapeFile();

    private:
        virtual void resizeEvent(QResizeEvent *event);

        QPointF getCenter();

        void setupPolygon();

        void redefinePolygon();

        Ui::ShapeSelector *ui;
        QList<std::shared_ptr<View::SelectionVertex> > vertices;
        std::shared_ptr<Packing::EuclidPacking> packing;
        std::shared_ptr<View::PackingView> packingView;
        QGraphicsPolygonItem* polygon;
        int selectedRow = -1;
        qreal circleRadius = 0.1;


    };
    } //namespace gui
} //namespace circles


#endif // UI_SHAPESELECTOR_HPP
